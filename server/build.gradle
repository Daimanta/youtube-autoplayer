plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.apache.commons:commons-lang3:3.15.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.17.1'
    implementation 'org.codelibs:jcifs:2.1.35'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    into("BOOT-INF/classes/static") {
        from("${project(':frontend').projectDir}/src")
    }

    manifest {
        attributes 'Implementation-Gitcommit': getCheckedOutGitCommitHash()
    }
}

bootRun {
    systemProperties = System.properties
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootDir/.git/"
    def takeFromHash = 12
    def file = new File(gitFolder + "HEAD")
    if (!file.exists()) return "No Git"
    def head = file.text.split(":")
    def isCommit = head.length == 1
    if(isCommit) return head[0].trim().take(takeFromHash)
    def refHead = new File(gitFolder + head[1].trim())
    if (!refHead.exists()) return "No Git"
    refHead.text.trim().take takeFromHash
}
